{"version":3,"sources":["webpack:///src/app/user/login/login-form/login-form.component.ts","webpack:///src/app/user/login/login-form/login-form.component.html","webpack:///src/app/user/login/login-routing.module.ts","webpack:///src/app/user/login/login.component.ts","webpack:///src/app/user/login/login.component.html","webpack:///src/app/user/login/login.module.ts"],"names":["LoginFormComponent","createFormControls","createForm","email","required","pattern","password","minLength","loginForm","console","log","value","formData","markAsTouched","selector","templateUrl","styleUrls","routes","path","component","LoginRoutingModule","forChild","imports","exports","providers","LoginComponent","_authService","router","_toastrMessageService","setTimeout","clearToast","dismissToastOnClick","isLoggedIn","model","loginFormData","onSubmit","valid","navigate","data","signinUser","subscribe","response","typeSuccess","response_message","error","typeError","status_text","login","LoginModule","declarations"],"mappings":"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","file":"login-login-module-es5.js","sourcesContent":["import {Component, OnInit} from '@angular/core';\nimport {FormGroup, FormControl, Validators} from '@angular/forms';\n// import {AuthService} from '../shared/auth/auth.service';\n// import {ToastrService} from '../shared/services/toastr.service';\n// import {ActivatedRoute, Router} from '@angular/router';\n// import {AuthenticationService, DataService, ToastrService} from '../../_services/index';\n\n@Component({\n    selector: 'login-form',\n    templateUrl: './login-form.component.html',\n    styleUrls: ['./login-form.component.css']\n})\nexport class LoginFormComponent implements OnInit {\n\n    loginForm: FormGroup;\n    email: FormControl;\n    password: FormControl;\n\n    ngOnInit() {\n        this.createFormControls();\n        this.createForm();\n    }\n\n    createFormControls() {\n        this.email = new FormControl('', [\n            Validators.required,\n            Validators.pattern(\"[^ @]*@[^ @]*\")\n        ]);\n        this.password = new FormControl('', [\n            Validators.required,\n            Validators.minLength(5)\n        ]);\n    }\n\n    createForm() {\n        this.loginForm = new FormGroup({\n            email: this.email,\n            password: this.password\n        });\n    }\n\n    onSubmit() {\n        console.log('you submitted value: ', this.loginForm.value);\n        const formData = this.loginForm[\"controls\"];\n        formData['email'].markAsTouched();\n        formData['password'].markAsTouched();\n    }\n}\n","<form novalidate\n      [formGroup]=\"loginForm\">\n    <div class=\"form-group\"\n         [ngClass]=\"{\n        'has-danger': email.invalid && (email.dirty || email.touched),\n        'has-success': email.valid && (email.dirty || email.touched)}\">\n        <input type=\"text\"\n               id=\"login\"\n               class=\"fadeIn\"\n               placeholder=\"email\"\n               formControlName=\"email\"\n               required>\n        <div class=\"form-control-feedback\"\n             *ngIf=\"email.errors && (email.dirty || email.touched)\">\n            <p *ngIf=\"email.errors.required\">Email is required</p>\n            <p *ngIf=\"password.errors.pattern\">The email address must contain at least the @ character</p>\n        </div>\n        <!--<pre>Valid? {{ myform.controls.email.valid }}</pre>-->\n        <!--<pre>Dirty? {{ myform.controls.email.dirty }}</pre>-->\n    </div>\n    <div class=\"form-group\"\n         [ngClass]=\" {\n        'has-danger': password.invalid && (password.dirty || password.touched),\n        'has-success': password.valid && (password.dirty || password.touched) }\">\n        <input type=\"text\"\n               class=\"fadeIn\"\n               name=\"login\"\n               id=\"password\"\n               placeholder=\"password\"\n               formControlName=\"password\"\n               required>\n        <div class=\"form-control-feedback\"\n             *ngIf=\"password.errors && (password.dirty || password.touched)\">\n            <p *ngIf=\"password.errors.required\">Password is required</p>\n            <p *ngIf=\"password.errors.minlength\">Password must be 5 characters long, we need another\n                {{password.errors.minlength.requiredLength - password.errors.minlength.actualLength}}\n                characters </p>\n        </div>\n    </div>\n</form>","import {NgModule} from '@angular/core';\nimport {Routes, RouterModule} from '@angular/router';\nimport {LoginComponent} from './login.component';\nimport {AuthService} from '../../shared/auth/auth.service'\n\nconst routes: Routes = [\n    {path: '', component: LoginComponent}\n];\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [RouterModule],\n    providers: [AuthService]\n})\nexport class LoginRoutingModule {\n}\n","import {Component, OnInit, ViewChild, AfterViewInit, OnDestroy, AfterContentChecked} from '@angular/core';\nimport {FormGroup, FormControl, Validators} from '@angular/forms';\nimport {AuthService} from '../../shared/auth/auth.service';\nimport {ToastrMessageService} from '../../shared/services/toastr-message.service';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {LoginFormComponent} from './login-form/login-form.component';\nimport {Observable} from 'rxjs'\nimport {catchError, map, tap} from 'rxjs/operators';\n\n@Component({\n    selector: 'app-login',\n    templateUrl: './login.component.html',\n    styleUrls: ['./login.component.css'],\n    providers: [ToastrMessageService]\n})\n\nexport class LoginComponent implements OnInit, AfterViewInit, OnDestroy, AfterContentChecked {\n\n    @ViewChild(LoginFormComponent) loginFormData;\n    model: any;\n\n    constructor(private _authService: AuthService,\n                private router: Router,\n                private _toastrMessageService: ToastrMessageService) {\n    }\n\n    ngOnInit() {\n        setTimeout(() => {\n            this._toastrMessageService.clearToast();\n            this._toastrMessageService.dismissToastOnClick(`Username: 12345@gmail.com, Password: 12345`, `Credentials`);\n        })\n\n        if (this._authService.isLoggedIn()) {\n        }\n    }\n\n    ngAfterViewInit() {\n        this.model = this.loginFormData.loginForm;\n    }\n\n    ngAfterContentChecked() {\n\n    }\n\n    onSubmit() {\n        this.loginFormData.onSubmit();\n    }\n\n    ngOnDestroy() {\n        // this._toastrService.clearToast();\n    }\n\n    login(): void {\n        //debugger;\n        if (!this.model.valid) {\n            this.onSubmit();\n            console.log(\"Form is invalid!\");\n            return;\n        }\n        if (this._authService.isLoggedIn()) {\n            this.router.navigate(['/pages'])\n            return;\n        } else {\n            let data = this.model[\"controls\"];\n           // debugger;\n            this._authService.signinUser(data.email.value, data.password.value)\n                .subscribe(\n                    (data: { data: any, response: string, response_message: Array<any> }) => {\n                        if (data.response === 'success') {\n                            \n                            this._toastrMessageService.typeSuccess(data.response_message);\n                            this.router.navigate(['pages']);\n                        }\n                    },\n                    (error) => {\n                        this._toastrMessageService.typeError(error.error.response_message || error.status_text);\n                        this.router.navigate(['login']);\n                    });\n        }\n    }\n}","<div class=\"wrapper fadeInDown\">\n    <div id=\"formContent\">\n        <!-- Tabs Titles -->\n        <!-- Icon -->\n        <div class=\"fadeIn\">\n            <img src=\"assets/img/login/icon.svg\" id=\"icon\" alt=\"User Icon\"/>\n        </div>\n        <login-form></login-form>\n        <input type=\"submit\" class=\"fadeIn\" value=\"Log In\" (click)=\"login()\">\n        <div id=\"formFooter\">\n            <!--<a class=\"underlineHover\" routerLink=\"/user/signup\">Forgot Password?</a> /-->\n            <a class=\"underlineHover\" routerLink=\"/signup\">Create Account</a>\n        </div>\n    </div>\n</div>","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ReactiveFormsModule, FormsModule} from '@angular/forms';\nimport {LoginRoutingModule} from './login-routing.module';\nimport {LoginComponent} from './login.component';\nimport {LoginFormComponent} from './login-form/login-form.component';\nimport { HttpClientModule } from '@angular/common/http';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        LoginRoutingModule,\n        FormsModule,\n        ReactiveFormsModule,\n        HttpClientModule\n\n    ],\n    declarations: [LoginComponent, LoginFormComponent]\n})\nexport class LoginModule {\n}\n"]}